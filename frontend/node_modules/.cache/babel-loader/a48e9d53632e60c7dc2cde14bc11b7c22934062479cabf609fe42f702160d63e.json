{"ast":null,"code":"var _jsxFileName = \"E:\\\\testis\\\\frontend\\\\src\\\\HalamanUtama.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport ModalAddMonth from './ModalAddMonth'; // Sesuaikan path jika berbeda\nimport { getBudgets, setBudget, getCategories } from './apiservice'; // Import fungsi API\n\n// Fungsi helper untuk memformat bulan menjadi string yang mudah dibaca (misal: \"Juli 2025\")\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatMonth = monthString => {\n  // Pastikan monthString tidak kosong atau undefined sebelum dipecah\n  if (!monthString) return '';\n  const [year, month] = monthString.split('-');\n  // Date object bulan adalah 0-indexed (Januari = 0, Desember = 11)\n  const date = new Date(parseInt(year), parseInt(month) - 1);\n\n  // Gunakan Intl.DateTimeFormat untuk format lokal yang bagus\n  return new Intl.DateTimeFormat('id-ID', {\n    year: 'numeric',\n    month: 'long'\n  }).format(date);\n};\nfunction App() {\n  _s();\n  // State untuk menyimpan data budget per bulan dan kategori\n  // Format: { \"YYYY-MM\": { categoryId: { id: ..., amount: ..., ... }, ... } }\n  const [budgetsByMonth, setBudgetsByMonth] = useState({});\n\n  // State untuk menyimpan daftar kategori\n  const [categories, setCategories] = useState([]);\n\n  // State untuk bulan yang sedang terpilih di dropdown\n  const [selectedMonth, setSelectedMonth] = useState('');\n\n  // State untuk mengontrol tampilan modal tambah bulan\n  const [isModalAddMonthOpen, setIsModalAddMonthOpen] = useState(false);\n\n  // State untuk indikator loading\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Fungsi untuk mengambil semua data budget dan kategori dari backend\n  // Menggunakan useCallback untuk memoize fungsi ini\n  const fetchData = useCallback(async () => {\n    setIsLoading(true); // Mulai loading\n    try {\n      // Ambil semua budget dari backend (endpoint yang sekarang mengembalikan semua data)\n      const fetchedBudgets = await getBudgets();\n      // Ambil semua kategori dari backend\n      const fetchedCategories = await getCategories();\n      setCategories(fetchedCategories); // Update state kategori\n\n      // Proses data budget yang diambil untuk mengisi budgetsByMonth\n      const newBudgetsByMonth = {};\n      fetchedBudgets.forEach(budget => {\n        // Buat kunci bulan dalam format \"YYYY-MM\"\n        const monthKey = `${budget.year}-${String(budget.month).padStart(2, '0')}`;\n\n        // Jika bulan belum ada di objek, inisialisasi\n        if (!newBudgetsByMonth[monthKey]) {\n          newBudgetsByMonth[monthKey] = {};\n        }\n        // Simpan data budget di bawah bulan dan ID kategori\n        newBudgetsByMonth[monthKey][budget.category_id] = budget;\n      });\n      setBudgetsByMonth(newBudgetsByMonth); // Update state budgetsByMonth\n\n      // Logika untuk mengatur bulan yang terpilih secara default\n      // Urutkan kunci bulan secara kronologis\n      const sortedMonths = Object.keys(newBudgetsByMonth).sort((a, b) => new Date(a) - new Date(b));\n      if (sortedMonths.length > 0) {\n        // Jika ada bulan yang tersedia:\n        // Coba pertahankan selectedMonth saat ini jika valid,\n        // jika tidak, set ke bulan terbaru dari data yang diambil\n        if (!selectedMonth || !newBudgetsByMonth[selectedMonth]) {\n          setSelectedMonth(sortedMonths[sortedMonths.length - 1]);\n        }\n      } else {\n        // Jika tidak ada bulan sama sekali di database:\n        // Set selectedMonth ke bulan saat ini\n        const today = new Date();\n        const currentMonth = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}`;\n        setSelectedMonth(currentMonth);\n        // Opsi: Jika tidak ada bulan, bisa langsung membuka modal tambah bulan secara otomatis\n        // setIsModalAddMonthOpen(true);\n      }\n    } catch (error) {\n      console.error(\"Gagal mengambil data:\", error);\n      // Tampilkan pesan error ke pengguna\n      alert(\"Gagal memuat data budget. Silakan cek koneksi Anda atau coba lagi.\");\n    } finally {\n      setIsLoading(false); // Selesai loading\n    }\n  }, [selectedMonth]); // selectedMonth sebagai dependensi agar fetchData terpanggil saat bulan berubah\n\n  // useEffect untuk memanggil fetchData saat komponen pertama kali dimuat\n  // [fetchData] sebagai dependensi agar fungsi tersebut stabil (karena useCallback)\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  // Fungsi yang dipanggil ketika user menambahkan bulan baru dari modal\n  const handleAddMonth = async newMonthYYYYMM => {\n    // Cek apakah bulan sudah ada\n    if (budgetsByMonth[newMonthYYYYMM]) {\n      alert(\"Maaf, bulan ini sudah ada!\");\n      return;\n    }\n    setIsLoading(true); // Mulai loading\n    try {\n      const [year, month] = newMonthYYYYMM.split('-');\n\n      // Pastikan ada kategori yang tersedia untuk diinisialisasi\n      if (categories.length === 0) {\n        alert(\"Tidak ada kategori yang ditemukan. Silakan tambahkan kategori terlebih dahulu.\");\n        setIsLoading(false);\n        return;\n      }\n\n      // Buat array Promise untuk setiap kategori\n      // Setiap promise akan memanggil setBudget untuk menginisialisasi budget 0 di backend\n      const budgetPromises = categories.map(async category => {\n        await setBudget({\n          category_id: category.id,\n          amount: 0,\n          // Inisialisasi dengan budget nol\n          year: parseInt(year),\n          month: parseInt(month)\n        });\n      });\n\n      // Tunggu semua promise selesai (semua budget untuk bulan baru telah dibuat di backend)\n      await Promise.all(budgetPromises);\n\n      // Setelah data disimpan di backend, panggil ulang fetchData untuk merefresh UI\n      // Ini akan memastikan bulan yang baru ditambahkan muncul di dropdown\n      await fetchData();\n      setSelectedMonth(newMonthYYYYMM); // Set bulan yang baru ditambahkan sebagai bulan terpilih\n      setIsModalAddMonthOpen(false); // Tutup modal\n      alert(`Bulan ${formatMonth(newMonthYYYYMM)} berhasil ditambahkan.`);\n    } catch (error) {\n      console.error(\"Gagal menambahkan bulan:\", error);\n      alert(\"Terjadi kesalahan saat menambahkan bulan: \" + error.message);\n    } finally {\n      setIsLoading(false); // Selesai loading\n    }\n  };\n\n  // Fungsi untuk menyimpan perubahan budget untuk kategori tertentu\n  const handleSaveBudget = async (categoryId, amount) => {\n    // Pastikan ada bulan yang terpilih\n    if (!selectedMonth) {\n      alert(\"Pilih bulan terlebih dahulu!\");\n      return;\n    }\n    setIsLoading(true); // Mulai loading\n    try {\n      // Pecah string bulan yang terpilih menjadi tahun dan bulan integer\n      const [year, month] = selectedMonth.split('-');\n\n      // Panggil API setBudget untuk menyimpan perubahan\n      await setBudget({\n        category_id: categoryId,\n        amount: parseFloat(amount) || 0,\n        // Pastikan amount adalah number\n        year: parseInt(year),\n        month: parseInt(month)\n      });\n      // Setelah menyimpan, refresh data untuk memastikan UI update\n      await fetchData();\n      alert(\"Budget berhasil diperbarui!\");\n    } catch (error) {\n      console.error(\"Gagal menyimpan budget:\", error);\n      alert(\"Gagal menyimpan budget: \" + error.message);\n    } finally {\n      setIsLoading(false); // Selesai loading\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-3xl font-bold mb-6 text-center\",\n      children: \"Aplikasi Pengelola Budget\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-4 rounded-lg shadow-xl\",\n        children: \"Memuat data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4 flex items-center justify-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"month-select\",\n        className: \"text-sm font-semibold mr-2 text-gray-700\",\n        children: \"Pilih Bulan:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"month-select\" // Tambahkan ID untuk aksesibilitas\n        ,\n        value: selectedMonth // Nilai yang terpilih dikontrol oleh state\n        ,\n        onChange: e => {\n          const val = e.target.value;\n          if (val === \"add_new\") {\n            setIsModalAddMonthOpen(true); // Buka modal jika pilih \"Tambah Bulan\"\n          } else {\n            setSelectedMonth(val); // Set bulan yang terpilih\n          }\n        },\n        className: \"p-2 border rounded shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500\",\n        children: [Object.keys(budgetsByMonth).sort((a, b) => new Date(a) - new Date(b)).map(monthKey => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: monthKey,\n          children: [formatMonth(monthKey), \" \"]\n        }, monthKey, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 29\n        }, this)), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"add_new\",\n          children: \"+ Tambah Bulan\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 21\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }, this), selectedMonth && budgetsByMonth[selectedMonth] ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white p-6 rounded-lg shadow-md\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold mb-4 text-center\",\n        children: [\"Budget Bulan \", formatMonth(selectedMonth)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"min-w-full bg-white\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"py-2 px-4 border-b text-left\",\n              children: \"Kategori\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"py-2 px-4 border-b text-right\",\n              children: \"Jumlah Budget\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"py-2 px-4 border-b text-center\",\n              children: \"Aksi\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: categories.map(category => {\n            var _budgetsByMonth$selec;\n            // Dapatkan data budget untuk kategori dan bulan ini\n            // Gunakan optional chaining `?.` untuk menghindari error jika data belum ada\n            const budgetData = (_budgetsByMonth$selec = budgetsByMonth[selectedMonth]) === null || _budgetsByMonth$selec === void 0 ? void 0 : _budgetsByMonth$selec[category.id];\n            // Set jumlah budget ke 0 jika tidak ada data\n            const currentAmount = budgetData ? budgetData.amount : 0;\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"py-2 px-4 border-b\",\n                children: category.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 247,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"py-2 px-4 border-b text-right\",\n                children: [\"Rp. \", parseFloat(currentAmount).toLocaleString('id-ID')]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"py-2 px-4 border-b text-center\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  defaultValue: currentAmount,\n                  onBlur: e => handleSaveBudget(category.id, e.target.value),\n                  className: \"w-24 p-1 border rounded\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 253,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 41\n              }, this)]\n            }, category.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 37\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 17\n    }, this) :\n    /*#__PURE__*/\n    // Pesan saat tidak ada bulan terpilih atau data tidak ada\n    _jsxDEV(\"p\", {\n      className: \"text-center text-gray-600 mt-8\",\n      children: isLoading ? \"Memuat data...\" : \"Pilih bulan atau tambahkan bulan baru untuk melihat budget.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(ModalAddMonth, {\n      isOpen: isModalAddMonthOpen,\n      onClose: () => setIsModalAddMonthOpen(false),\n      onAddMonth: handleAddMonth\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"Y37rsCz0uoo46AWrgu031kvIp9s=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","ModalAddMonth","getBudgets","setBudget","getCategories","jsxDEV","_jsxDEV","formatMonth","monthString","year","month","split","date","Date","parseInt","Intl","DateTimeFormat","format","App","_s","budgetsByMonth","setBudgetsByMonth","categories","setCategories","selectedMonth","setSelectedMonth","isModalAddMonthOpen","setIsModalAddMonthOpen","isLoading","setIsLoading","fetchData","fetchedBudgets","fetchedCategories","newBudgetsByMonth","forEach","budget","monthKey","String","padStart","category_id","sortedMonths","Object","keys","sort","a","b","length","today","currentMonth","getFullYear","getMonth","error","console","alert","handleAddMonth","newMonthYYYYMM","budgetPromises","map","category","id","amount","Promise","all","message","handleSaveBudget","categoryId","parseFloat","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","value","onChange","e","val","target","_budgetsByMonth$selec","budgetData","currentAmount","name","toLocaleString","type","defaultValue","onBlur","isOpen","onClose","onAddMonth","_c","$RefreshReg$"],"sources":["E:/testis/frontend/src/HalamanUtama.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport ModalAddMonth from './ModalAddMonth'; // Sesuaikan path jika berbeda\r\nimport { getBudgets, setBudget, getCategories } from './apiservice'; // Import fungsi API\r\n\r\n// Fungsi helper untuk memformat bulan menjadi string yang mudah dibaca (misal: \"Juli 2025\")\r\nconst formatMonth = (monthString) => {\r\n    // Pastikan monthString tidak kosong atau undefined sebelum dipecah\r\n    if (!monthString) return '';\r\n    \r\n    const [year, month] = monthString.split('-');\r\n    // Date object bulan adalah 0-indexed (Januari = 0, Desember = 11)\r\n    const date = new Date(parseInt(year), parseInt(month) - 1); \r\n    \r\n    // Gunakan Intl.DateTimeFormat untuk format lokal yang bagus\r\n    return new Intl.DateTimeFormat('id-ID', { year: 'numeric', month: 'long' }).format(date);\r\n};\r\n\r\nfunction App() {\r\n    // State untuk menyimpan data budget per bulan dan kategori\r\n    // Format: { \"YYYY-MM\": { categoryId: { id: ..., amount: ..., ... }, ... } }\r\n    const [budgetsByMonth, setBudgetsByMonth] = useState({});\r\n    \r\n    // State untuk menyimpan daftar kategori\r\n    const [categories, setCategories] = useState([]);\r\n    \r\n    // State untuk bulan yang sedang terpilih di dropdown\r\n    const [selectedMonth, setSelectedMonth] = useState('');\r\n    \r\n    // State untuk mengontrol tampilan modal tambah bulan\r\n    const [isModalAddMonthOpen, setIsModalAddMonthOpen] = useState(false);\r\n    \r\n    // State untuk indikator loading\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    // Fungsi untuk mengambil semua data budget dan kategori dari backend\r\n    // Menggunakan useCallback untuk memoize fungsi ini\r\n    const fetchData = useCallback(async () => {\r\n        setIsLoading(true); // Mulai loading\r\n        try {\r\n            // Ambil semua budget dari backend (endpoint yang sekarang mengembalikan semua data)\r\n            const fetchedBudgets = await getBudgets(); \r\n            // Ambil semua kategori dari backend\r\n            const fetchedCategories = await getCategories();\r\n\r\n            setCategories(fetchedCategories); // Update state kategori\r\n\r\n            // Proses data budget yang diambil untuk mengisi budgetsByMonth\r\n            const newBudgetsByMonth = {};\r\n            fetchedBudgets.forEach(budget => {\r\n                // Buat kunci bulan dalam format \"YYYY-MM\"\r\n                const monthKey = `${budget.year}-${String(budget.month).padStart(2, '0')}`;\r\n                \r\n                // Jika bulan belum ada di objek, inisialisasi\r\n                if (!newBudgetsByMonth[monthKey]) {\r\n                    newBudgetsByMonth[monthKey] = {};\r\n                }\r\n                // Simpan data budget di bawah bulan dan ID kategori\r\n                newBudgetsByMonth[monthKey][budget.category_id] = budget;\r\n            });\r\n\r\n            setBudgetsByMonth(newBudgetsByMonth); // Update state budgetsByMonth\r\n\r\n            // Logika untuk mengatur bulan yang terpilih secara default\r\n            // Urutkan kunci bulan secara kronologis\r\n            const sortedMonths = Object.keys(newBudgetsByMonth).sort((a, b) => new Date(a) - new Date(b));\r\n\r\n            if (sortedMonths.length > 0) {\r\n                // Jika ada bulan yang tersedia:\r\n                // Coba pertahankan selectedMonth saat ini jika valid,\r\n                // jika tidak, set ke bulan terbaru dari data yang diambil\r\n                if (!selectedMonth || !newBudgetsByMonth[selectedMonth]) {\r\n                    setSelectedMonth(sortedMonths[sortedMonths.length - 1]);\r\n                }\r\n            } else {\r\n                // Jika tidak ada bulan sama sekali di database:\r\n                // Set selectedMonth ke bulan saat ini\r\n                const today = new Date();\r\n                const currentMonth = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}`;\r\n                setSelectedMonth(currentMonth);\r\n                // Opsi: Jika tidak ada bulan, bisa langsung membuka modal tambah bulan secara otomatis\r\n                // setIsModalAddMonthOpen(true);\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error(\"Gagal mengambil data:\", error);\r\n            // Tampilkan pesan error ke pengguna\r\n            alert(\"Gagal memuat data budget. Silakan cek koneksi Anda atau coba lagi.\");\r\n        } finally {\r\n            setIsLoading(false); // Selesai loading\r\n        }\r\n    }, [selectedMonth]); // selectedMonth sebagai dependensi agar fetchData terpanggil saat bulan berubah\r\n\r\n    // useEffect untuk memanggil fetchData saat komponen pertama kali dimuat\r\n    // [fetchData] sebagai dependensi agar fungsi tersebut stabil (karena useCallback)\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, [fetchData]); \r\n\r\n    // Fungsi yang dipanggil ketika user menambahkan bulan baru dari modal\r\n    const handleAddMonth = async (newMonthYYYYMM) => {\r\n        // Cek apakah bulan sudah ada\r\n        if (budgetsByMonth[newMonthYYYYMM]) {\r\n            alert(\"Maaf, bulan ini sudah ada!\");\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true); // Mulai loading\r\n        try {\r\n            const [year, month] = newMonthYYYYMM.split('-');\r\n\r\n            // Pastikan ada kategori yang tersedia untuk diinisialisasi\r\n            if (categories.length === 0) {\r\n                alert(\"Tidak ada kategori yang ditemukan. Silakan tambahkan kategori terlebih dahulu.\");\r\n                setIsLoading(false);\r\n                return;\r\n            }\r\n\r\n            // Buat array Promise untuk setiap kategori\r\n            // Setiap promise akan memanggil setBudget untuk menginisialisasi budget 0 di backend\r\n            const budgetPromises = categories.map(async (category) => {\r\n                await setBudget({\r\n                    category_id: category.id,\r\n                    amount: 0, // Inisialisasi dengan budget nol\r\n                    year: parseInt(year),\r\n                    month: parseInt(month),\r\n                });\r\n            });\r\n\r\n            // Tunggu semua promise selesai (semua budget untuk bulan baru telah dibuat di backend)\r\n            await Promise.all(budgetPromises); \r\n            \r\n            // Setelah data disimpan di backend, panggil ulang fetchData untuk merefresh UI\r\n            // Ini akan memastikan bulan yang baru ditambahkan muncul di dropdown\r\n            await fetchData(); \r\n\r\n            setSelectedMonth(newMonthYYYYMM); // Set bulan yang baru ditambahkan sebagai bulan terpilih\r\n            setIsModalAddMonthOpen(false); // Tutup modal\r\n            alert(`Bulan ${formatMonth(newMonthYYYYMM)} berhasil ditambahkan.`);\r\n        } catch (error) {\r\n            console.error(\"Gagal menambahkan bulan:\", error);\r\n            alert(\"Terjadi kesalahan saat menambahkan bulan: \" + error.message);\r\n        } finally {\r\n            setIsLoading(false); // Selesai loading\r\n        }\r\n    };\r\n\r\n    // Fungsi untuk menyimpan perubahan budget untuk kategori tertentu\r\n    const handleSaveBudget = async (categoryId, amount) => {\r\n        // Pastikan ada bulan yang terpilih\r\n        if (!selectedMonth) {\r\n            alert(\"Pilih bulan terlebih dahulu!\");\r\n            return;\r\n        }\r\n        setIsLoading(true); // Mulai loading\r\n        try {\r\n            // Pecah string bulan yang terpilih menjadi tahun dan bulan integer\r\n            const [year, month] = selectedMonth.split('-');\r\n            \r\n            // Panggil API setBudget untuk menyimpan perubahan\r\n            await setBudget({\r\n                category_id: categoryId,\r\n                amount: parseFloat(amount) || 0, // Pastikan amount adalah number\r\n                year: parseInt(year),\r\n                month: parseInt(month),\r\n            });\r\n            // Setelah menyimpan, refresh data untuk memastikan UI update\r\n            await fetchData(); \r\n            alert(\"Budget berhasil diperbarui!\");\r\n        } catch (error) {\r\n            console.error(\"Gagal menyimpan budget:\", error);\r\n            alert(\"Gagal menyimpan budget: \" + error.message);\r\n        } finally {\r\n            setIsLoading(false); // Selesai loading\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"container mx-auto p-4\">\r\n            <h1 className=\"text-3xl font-bold mb-6 text-center\">Aplikasi Pengelola Budget</h1>\r\n\r\n            {/* Indikator Loading */}\r\n            {isLoading && (\r\n                <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50\">\r\n                    <div className=\"bg-white p-4 rounded-lg shadow-xl\">\r\n                        Memuat data...\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            <div className=\"mb-4 flex items-center justify-center\">\r\n                <label htmlFor=\"month-select\" className=\"text-sm font-semibold mr-2 text-gray-700\">\r\n                    Pilih Bulan:\r\n                </label>\r\n                <select\r\n                    id=\"month-select\" // Tambahkan ID untuk aksesibilitas\r\n                    value={selectedMonth} // Nilai yang terpilih dikontrol oleh state\r\n                    onChange={(e) => {\r\n                        const val = e.target.value;\r\n                        if (val === \"add_new\") {\r\n                            setIsModalAddMonthOpen(true); // Buka modal jika pilih \"Tambah Bulan\"\r\n                        } else {\r\n                            setSelectedMonth(val); // Set bulan yang terpilih\r\n                        }\r\n                    }}\r\n                    className=\"p-2 border rounded shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                >\r\n                    {/* Render opsi bulan dari budgetsByMonth */}\r\n                    {/* Urutkan bulan secara kronologis untuk tampilan yang rapi */}\r\n                    {Object.keys(budgetsByMonth)\r\n                        .sort((a, b) => new Date(a) - new Date(b)) \r\n                        .map((monthKey) => (\r\n                            <option key={monthKey} value={monthKey}>\r\n                                {formatMonth(monthKey)} {/* Tampilkan bulan dalam format yang mudah dibaca */}\r\n                            </option>\r\n                        ))\r\n                    }\r\n                    <option value=\"add_new\">+ Tambah Bulan</option> {/* Opsi untuk menambah bulan baru */}\r\n                </select>\r\n            </div>\r\n\r\n            {/* Bagian untuk menampilkan detail budget per kategori untuk bulan yang terpilih */}\r\n            {/* Hanya render jika ada bulan terpilih dan data untuk bulan tersebut tersedia */}\r\n            {selectedMonth && budgetsByMonth[selectedMonth] ? (\r\n                <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n                    <h2 className=\"text-2xl font-bold mb-4 text-center\">\r\n                        Budget Bulan {formatMonth(selectedMonth)}\r\n                    </h2>\r\n                    <table className=\"min-w-full bg-white\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th className=\"py-2 px-4 border-b text-left\">Kategori</th>\r\n                                <th className=\"py-2 px-4 border-b text-right\">Jumlah Budget</th>\r\n                                <th className=\"py-2 px-4 border-b text-center\">Aksi</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {/* Loop melalui kategori untuk menampilkan budget masing-masing */}\r\n                            {categories.map((category) => {\r\n                                // Dapatkan data budget untuk kategori dan bulan ini\r\n                                // Gunakan optional chaining `?.` untuk menghindari error jika data belum ada\r\n                                const budgetData = budgetsByMonth[selectedMonth]?.[category.id];\r\n                                // Set jumlah budget ke 0 jika tidak ada data\r\n                                const currentAmount = budgetData ? budgetData.amount : 0;\r\n\r\n                                return (\r\n                                    <tr key={category.id}>\r\n                                        <td className=\"py-2 px-4 border-b\">{category.name}</td>\r\n                                        <td className=\"py-2 px-4 border-b text-right\">\r\n                                            Rp. {parseFloat(currentAmount).toLocaleString('id-ID')}\r\n                                        </td>\r\n                                        <td className=\"py-2 px-4 border-b text-center\">\r\n                                            {/* Input untuk mengubah budget, memanggil handleSaveBudget saat blur */}\r\n                                            <input\r\n                                                type=\"number\"\r\n                                                defaultValue={currentAmount}\r\n                                                onBlur={(e) => handleSaveBudget(category.id, e.target.value)}\r\n                                                className=\"w-24 p-1 border rounded\"\r\n                                            />\r\n                                        </td>\r\n                                    </tr>\r\n                                );\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            ) : (\r\n                // Pesan saat tidak ada bulan terpilih atau data tidak ada\r\n                <p className=\"text-center text-gray-600 mt-8\">\r\n                    {isLoading ? \"Memuat data...\" : \"Pilih bulan atau tambahkan bulan baru untuk melihat budget.\"}\r\n                </p>\r\n            )}\r\n\r\n            {/* Render komponen ModalAddMonth */}\r\n            <ModalAddMonth\r\n                isOpen={isModalAddMonthOpen}\r\n                onClose={() => setIsModalAddMonthOpen(false)}\r\n                onAddMonth={handleAddMonth}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}