{"ast":null,"code":"var _jsxFileName = \"E:\\\\testis\\\\frontend\\\\src\\\\HalamanUtama.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport ModalAddMonth from './ModalAddMonth'; // Sesuaikan path jika berbeda\nimport { getAccounts, getBudgets,\n// Asumsi ini bisa mengambil SEMUA budget jika tanpa parameter\ngetTransactions, getCategories, createBudget // Asumsi ini API untuk membuat budget baru\n} from './services/api'; // Sesuaikan path jika berbeda\nimport { transformBudgetsData } from './utils/dataTransforms'; // Sesuaikan path jika berbeda\n\n// --- Fungsi Helper: formatMonth (Sudah diperbaiki untuk lebih robust) ---\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst formatMonth = monthString => {\n  if (!monthString) {\n    console.warn(\"formatMonth received empty or null string.\");\n    return '';\n  }\n  const parts = monthString.split('-');\n  if (parts.length !== 2) {\n    console.error(\"formatMonth: Invalid month string format. Expected 'YYYY-MM', received:\", monthString);\n    return monthString;\n  }\n  const year = parseInt(parts[0], 10);\n  const month = parseInt(parts[1], 10);\n  if (isNaN(year) || isNaN(month)) {\n    console.error(\"formatMonth: Non-numeric year or month. Received:\", monthString, {\n      year,\n      month\n    });\n    return monthString;\n  }\n  const date = new Date(year, month - 1);\n  if (isNaN(date.getTime())) {\n    console.error(\"formatMonth: Created invalid Date object for:\", monthString, \"Date object:\", date);\n    return monthString;\n  }\n  return new Intl.DateTimeFormat('id-ID', {\n    year: 'numeric',\n    month: 'long'\n  }).format(date);\n};\n\n// --- Komponen App ---\nfunction App() {\n  _s();\n  const [accounts, setAccounts] = useState([]);\n  const [budgetsByMonth, setBudgetsByMonth] = useState({}); // Mengandung SEMUA budget berdasarkan bulan\n  const [transactions, setTransactions] = useState([]); // Akan hanya expense transactions\n  const [pendapatan, setPendapatan] = useState([]); // Akan hanya income transactions\n  const [categories, setCategories] = useState([]);\n  const [selectedMonth, setSelectedMonth] = useState(''); // Bulan yang saat ini dipilih di dropdown\n  const [isModalAddMonthOpen, setIsModalAddMonthOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // --- Fungsi untuk mengambil semua data yang diperlukan ---\n  const fetchData = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      // Mengambil semua data budget, transaksi, dll.\n      // Asumsi: getBudgets() tanpa parameter mengembalikan SEMUA budget\n      const [accountData, allBudgetsRawData,\n      // Data mentah dari semua budget bulanan\n      transactionData, categoryData] = await Promise.all([getAccounts(), getBudgets(),\n      // <-- PENTING: Panggil getBudgets TANPA parameter year, month\n      getTransactions(), getCategories()]);\n      setAccounts(accountData);\n\n      // Memproses dan set data budget (semua bulan)\n      const transformedBudgets = transformBudgetsData(allBudgetsRawData);\n      setBudgetsByMonth(transformedBudgets);\n\n      // Set bulan yang dipilih saat ini\n      if (!selectedMonth || !transformedBudgets[selectedMonth]) {\n        // Coba set ke bulan saat ini (YYYY-MM)\n        const currentMonthKey = new Date().toISOString().slice(0, 7);\n        if (transformedBudgets[currentMonthKey]) {\n          setSelectedMonth(currentMonthKey);\n        } else if (Object.keys(transformedBudgets).length > 0) {\n          // Jika bulan saat ini tidak ada, pilih bulan terakhir yang tersedia\n          setSelectedMonth(Object.keys(transformedBudgets).sort().pop());\n        } else {\n          // Jika tidak ada budget sama sekali, set ke bulan saat ini agar bisa ditambahkan\n          setSelectedMonth(currentMonthKey);\n        }\n      }\n\n      // Filter transaksi\n      const expenseTxs = transactionData.filter(tx => tx.type === 'expense');\n      const incomeTxs = transactionData.filter(tx => tx.type === 'income');\n      setTransactions(expenseTxs);\n      setPendapatan(incomeTxs);\n      setCategories(categoryData);\n    } catch (error) {\n      console.error(\"Gagal mengambil data:\", error);\n      // Di sini Anda bisa menambahkan logika redirect ke halaman login jika token tidak valid\n    } finally {\n      setIsLoading(false);\n    }\n  }, [selectedMonth]); // selectedMonth diperlukan di dependency karena digunakan dalam logika penentuan bulan awal\n\n  // Panggil fetchData saat komponen mount\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]); // Dependency array memastikan fetchData dipanggil ulang jika definisinya berubah\n\n  // --- Handler untuk menambah bulan baru dari modal ---\n  const handleAddMonth = async newMonthYYYYMM => {\n    try {\n      // 1. Panggil API backend untuk membuat/menginisialisasi bulan baru\n      //    Ini akan membuat entri budget awal untuk bulan tersebut di database Anda.\n      //    Asumsi: API 'createBudget' mengembalikan sukses jika berhasil.\n      const response = await createBudget({\n        month: newMonthYYYYMM,\n        initialAmount: 0\n      }); // Sesuaikan payload API Anda\n\n      if (response && response.success) {\n        // Sesuaikan kondisi sukses sesuai respons API Anda\n        alert(`Bulan ${formatMonth(newMonthYYYYMM)} berhasil ditambahkan.`);\n\n        // 2. Setelah berhasil ditambahkan ke backend, re-fetch semua data budget\n        //    Ini akan memastikan dropdown diperbarui dengan bulan yang baru.\n        await fetchData();\n\n        // 3. Set bulan yang baru ditambahkan sebagai bulan yang dipilih saat ini\n        setSelectedMonth(newMonthYYYYMM);\n      } else {\n        alert(\"Gagal menambahkan bulan. Pastikan bulan belum ada atau ada masalah server.\");\n      }\n    } catch (error) {\n      console.error(\"Error in handleAddMonth:\", error);\n      alert(\"Terjadi kesalahan saat menambahkan bulan.\");\n    } finally {\n      setIsModalAddMonthOpen(false); // Pastikan modal tertutup\n    }\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center items-center h-screen\",\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 12\n    }, this);\n  }\n\n  // --- Render Komponen ---\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"py-10 px-10 flex flex-row bg-gray-200\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col w-1/6 mr-8\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-col\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"bg-gray-500 rounded-md text-[13px] md:text-base lg:text-lg font-bold text-white px-2 w-3/4\",\n            children: \"Kategori Bulanan\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-4 py-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"month-select\",\n              className: \"text-sm font-semibold mr-2 text-gray-700\",\n              children: \"Pilih Bulan:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"month-select\",\n              name: \"selectedMonthDropdown\" // Berikan atribut 'name' juga\n              ,\n              value: selectedMonth,\n              onChange: e => {\n                const val = e.target.value;\n                if (val === \"add_new\") {\n                  setIsModalAddMonthOpen(true);\n                } else {\n                  setSelectedMonth(val);\n                }\n              },\n              className: \"border rounded px-2 py-1\" // Tambahkan styling jika diperlukan\n              ,\n              children: [Object.keys(budgetsByMonth).sort((a, b) => new Date(a) - new Date(b)).map(month => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: month,\n                children: formatMonth(month)\n              }, month, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 21\n              }, this)), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"add_new\",\n                children: \"+ Tambah Bulan\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex flex-wrap gap-3 py-1 w-full\",\n            children: selectedMonth && budgetsByMonth[selectedMonth] ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                className: \"font-semibold mt-4\",\n                children: [\"Detail Budget untuk \", formatMonth(selectedMonth), \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n                children: JSON.stringify(budgetsByMonth[selectedMonth], null, 2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Tidak ada data budget untuk bulan ini.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-bold mb-4\",\n          children: [\"Transaksi untuk \", formatMonth(selectedMonth)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"font-semibold mt-4\",\n          children: \"Pengeluaran:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this), transactions.filter(tx => tx.month === selectedMonth).map(tx => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [tx.description, \": \", tx.amount]\n        }, tx.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"font-semibold mt-4\",\n          children: \"Pendapatan:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this), pendapatan.filter(tx => tx.month === selectedMonth).map(tx => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [tx.description, \": \", tx.amount]\n        }, tx.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalAddMonth, {\n      isOpen: isModalAddMonthOpen,\n      onClose: () => setIsModalAddMonthOpen(false),\n      onAddMonth: handleAddMonth\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"8jnVGZxgNSYCrtT05PkSwLHTJRY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","ModalAddMonth","getAccounts","getBudgets","getTransactions","getCategories","createBudget","transformBudgetsData","jsxDEV","_jsxDEV","Fragment","_Fragment","formatMonth","monthString","console","warn","parts","split","length","error","year","parseInt","month","isNaN","date","Date","getTime","Intl","DateTimeFormat","format","App","_s","accounts","setAccounts","budgetsByMonth","setBudgetsByMonth","transactions","setTransactions","pendapatan","setPendapatan","categories","setCategories","selectedMonth","setSelectedMonth","isModalAddMonthOpen","setIsModalAddMonthOpen","isLoading","setIsLoading","fetchData","accountData","allBudgetsRawData","transactionData","categoryData","Promise","all","transformedBudgets","currentMonthKey","toISOString","slice","Object","keys","sort","pop","expenseTxs","filter","tx","type","incomeTxs","handleAddMonth","newMonthYYYYMM","response","initialAmount","success","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","name","value","onChange","e","val","target","a","b","map","JSON","stringify","description","amount","isOpen","onClose","onAddMonth","_c","$RefreshReg$"],"sources":["E:/testis/frontend/src/HalamanUtama.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport ModalAddMonth from './ModalAddMonth'; // Sesuaikan path jika berbeda\r\nimport {\r\n  getAccounts,\r\n  getBudgets, // Asumsi ini bisa mengambil SEMUA budget jika tanpa parameter\r\n  getTransactions,\r\n  getCategories,\r\n  createBudget // Asumsi ini API untuk membuat budget baru\r\n} from './services/api'; // Sesuaikan path jika berbeda\r\nimport { transformBudgetsData } from './utils/dataTransforms'; // Sesuaikan path jika berbeda\r\n\r\n// --- Fungsi Helper: formatMonth (Sudah diperbaiki untuk lebih robust) ---\r\nconst formatMonth = (monthString) => {\r\n  if (!monthString) {\r\n    console.warn(\"formatMonth received empty or null string.\");\r\n    return '';\r\n  }\r\n  const parts = monthString.split('-');\r\n\r\n  if (parts.length !== 2) {\r\n    console.error(\"formatMonth: Invalid month string format. Expected 'YYYY-MM', received:\", monthString);\r\n    return monthString;\r\n  }\r\n\r\n  const year = parseInt(parts[0], 10);\r\n  const month = parseInt(parts[1], 10);\r\n\r\n  if (isNaN(year) || isNaN(month)) {\r\n    console.error(\"formatMonth: Non-numeric year or month. Received:\", monthString, { year, month });\r\n    return monthString;\r\n  }\r\n\r\n  const date = new Date(year, month - 1);\r\n\r\n  if (isNaN(date.getTime())) {\r\n    console.error(\"formatMonth: Created invalid Date object for:\", monthString, \"Date object:\", date);\r\n    return monthString;\r\n  }\r\n\r\n  return new Intl.DateTimeFormat('id-ID', { year: 'numeric', month: 'long' }).format(date);\r\n};\r\n\r\n// --- Komponen App ---\r\nfunction App() {\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [budgetsByMonth, setBudgetsByMonth] = useState({}); // Mengandung SEMUA budget berdasarkan bulan\r\n  const [transactions, setTransactions] = useState([]); // Akan hanya expense transactions\r\n  const [pendapatan, setPendapatan] = useState([]); // Akan hanya income transactions\r\n  const [categories, setCategories] = useState([]);\r\n  const [selectedMonth, setSelectedMonth] = useState(''); // Bulan yang saat ini dipilih di dropdown\r\n  const [isModalAddMonthOpen, setIsModalAddMonthOpen] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // --- Fungsi untuk mengambil semua data yang diperlukan ---\r\n  const fetchData = useCallback(async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      // Mengambil semua data budget, transaksi, dll.\r\n      // Asumsi: getBudgets() tanpa parameter mengembalikan SEMUA budget\r\n      const [\r\n        accountData,\r\n        allBudgetsRawData, // Data mentah dari semua budget bulanan\r\n        transactionData,\r\n        categoryData\r\n      ] = await Promise.all([\r\n        getAccounts(),\r\n        getBudgets(), // <-- PENTING: Panggil getBudgets TANPA parameter year, month\r\n        getTransactions(),\r\n        getCategories()\r\n      ]);\r\n\r\n      setAccounts(accountData);\r\n\r\n      // Memproses dan set data budget (semua bulan)\r\n      const transformedBudgets = transformBudgetsData(allBudgetsRawData);\r\n      setBudgetsByMonth(transformedBudgets);\r\n\r\n      // Set bulan yang dipilih saat ini\r\n      if (!selectedMonth || !transformedBudgets[selectedMonth]) {\r\n        // Coba set ke bulan saat ini (YYYY-MM)\r\n        const currentMonthKey = new Date().toISOString().slice(0, 7);\r\n        if (transformedBudgets[currentMonthKey]) {\r\n          setSelectedMonth(currentMonthKey);\r\n        } else if (Object.keys(transformedBudgets).length > 0) {\r\n          // Jika bulan saat ini tidak ada, pilih bulan terakhir yang tersedia\r\n          setSelectedMonth(Object.keys(transformedBudgets).sort().pop());\r\n        } else {\r\n          // Jika tidak ada budget sama sekali, set ke bulan saat ini agar bisa ditambahkan\r\n          setSelectedMonth(currentMonthKey);\r\n        }\r\n      }\r\n\r\n      // Filter transaksi\r\n      const expenseTxs = transactionData.filter(tx => tx.type === 'expense');\r\n      const incomeTxs = transactionData.filter(tx => tx.type === 'income');\r\n      setTransactions(expenseTxs);\r\n      setPendapatan(incomeTxs);\r\n\r\n      setCategories(categoryData);\r\n\r\n    } catch (error) {\r\n      console.error(\"Gagal mengambil data:\", error);\r\n      // Di sini Anda bisa menambahkan logika redirect ke halaman login jika token tidak valid\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [selectedMonth]); // selectedMonth diperlukan di dependency karena digunakan dalam logika penentuan bulan awal\r\n\r\n  // Panggil fetchData saat komponen mount\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [fetchData]); // Dependency array memastikan fetchData dipanggil ulang jika definisinya berubah\r\n\r\n  // --- Handler untuk menambah bulan baru dari modal ---\r\n  const handleAddMonth = async (newMonthYYYYMM) => {\r\n    try {\r\n      // 1. Panggil API backend untuk membuat/menginisialisasi bulan baru\r\n      //    Ini akan membuat entri budget awal untuk bulan tersebut di database Anda.\r\n      //    Asumsi: API 'createBudget' mengembalikan sukses jika berhasil.\r\n      const response = await createBudget({ month: newMonthYYYYMM, initialAmount: 0 }); // Sesuaikan payload API Anda\r\n      \r\n      if (response && response.success) { // Sesuaikan kondisi sukses sesuai respons API Anda\r\n        alert(`Bulan ${formatMonth(newMonthYYYYMM)} berhasil ditambahkan.`);\r\n        \r\n        // 2. Setelah berhasil ditambahkan ke backend, re-fetch semua data budget\r\n        //    Ini akan memastikan dropdown diperbarui dengan bulan yang baru.\r\n        await fetchData(); \r\n\r\n        // 3. Set bulan yang baru ditambahkan sebagai bulan yang dipilih saat ini\r\n        setSelectedMonth(newMonthYYYYMM);\r\n      } else {\r\n        alert(\"Gagal menambahkan bulan. Pastikan bulan belum ada atau ada masalah server.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error in handleAddMonth:\", error);\r\n      alert(\"Terjadi kesalahan saat menambahkan bulan.\");\r\n    } finally {\r\n      setIsModalAddMonthOpen(false); // Pastikan modal tertutup\r\n    }\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <div className=\"flex justify-center items-center h-screen\">Loading data...</div>;\r\n  }\r\n\r\n  // --- Render Komponen ---\r\n  return (\r\n    <>\r\n      {/* Tampilan kolom bagian kiri */}\r\n      <div className=\"py-10 px-10 flex flex-row bg-gray-200\">\r\n        <div className=\"flex flex-col w-1/6 mr-8\">\r\n          <div className=\"flex flex-col\">\r\n            <h1 className=\"bg-gray-500 rounded-md text-[13px] md:text-base lg:text-lg font-bold text-white px-2 w-3/4\">\r\n              Kategori Bulanan\r\n            </h1>\r\n            <div className=\"mb-4 py-2\">\r\n              <label htmlFor=\"month-select\" className=\"text-sm font-semibold mr-2 text-gray-700\">\r\n                Pilih Bulan:\r\n              </label>\r\n              <select\r\n                id=\"month-select\"\r\n                name=\"selectedMonthDropdown\" // Berikan atribut 'name' juga\r\n                value={selectedMonth}\r\n                onChange={(e) => {\r\n                  const val = e.target.value;\r\n                  if (val === \"add_new\") {\r\n                    setIsModalAddMonthOpen(true);\r\n                  } else {\r\n                    setSelectedMonth(val);\r\n                  }\r\n                }}\r\n                className=\"border rounded px-2 py-1\" // Tambahkan styling jika diperlukan\r\n              >\r\n                {/* Opsi bulan dari budgetsByMonth */}\r\n                {Object.keys(budgetsByMonth)\r\n                  .sort((a, b) => new Date(a) - new Date(b))\r\n                  .map((month) => (\r\n                    <option key={month} value={month}>\r\n                      {formatMonth(month)}\r\n                    </option>\r\n                  ))}\r\n                <option value=\"add_new\">+ Tambah Bulan</option>\r\n              </select>\r\n            </div>\r\n            <div className=\"flex flex-wrap gap-3 py-1 w-full\">\r\n              {/* Di sini Anda bisa merender kategori atau informasi budget lainnya berdasarkan selectedMonth */}\r\n              {/* Contoh: */}\r\n              {selectedMonth && budgetsByMonth[selectedMonth] ? (\r\n                <div>\r\n                  <h2 className=\"font-semibold mt-4\">Detail Budget untuk {formatMonth(selectedMonth)}:</h2>\r\n                  {/* Render detail budget dari budgetsByMonth[selectedMonth] */}\r\n                  {/* Contoh: total budget, sisa, dsb. */}\r\n                  <pre>{JSON.stringify(budgetsByMonth[selectedMonth], null, 2)}</pre>\r\n                </div>\r\n              ) : (\r\n                <p>Tidak ada data budget untuk bulan ini.</p>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Tampilan kolom kanan (asumsi untuk transaksi atau detail lain) */}\r\n        <div className=\"flex-1\">\r\n          <h2 className=\"text-xl font-bold mb-4\">Transaksi untuk {formatMonth(selectedMonth)}</h2>\r\n          {/* Di sini Anda bisa memfilter transaksi berdasarkan selectedMonth */}\r\n          {/* Saat ini transactions dan pendapatan di-set dari semua transaksi,\r\n              Anda mungkin perlu memfilter ini lebih lanjut berdasarkan selectedMonth\r\n              atau mengubah getTransactions Anda untuk mengambil per bulan. */}\r\n          \r\n          <h3 className=\"font-semibold mt-4\">Pengeluaran:</h3>\r\n          {transactions.filter(tx => tx.month === selectedMonth).map(tx => (\r\n            <div key={tx.id}>{tx.description}: {tx.amount}</div>\r\n          ))}\r\n\r\n          <h3 className=\"font-semibold mt-4\">Pendapatan:</h3>\r\n          {pendapatan.filter(tx => tx.month === selectedMonth).map(tx => (\r\n            <div key={tx.id}>{tx.description}: {tx.amount}</div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Modal Tambah Bulan */}\r\n      <ModalAddMonth\r\n        isOpen={isModalAddMonthOpen}\r\n        onClose={() => setIsModalAddMonthOpen(false)}\r\n        onAddMonth={handleAddMonth}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}