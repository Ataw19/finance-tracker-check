{"ast":null,"code":"// apiservice.js\nconst API_URL = 'http://localhost:5000/api'; // Pastikan ini mengarah ke backend Anda\n\n/**\r\n * Mengambil token otentikasi dari localStorage.\r\n * @returns {string | null} Token JWT jika ada, atau null.\r\n */\nconst getToken = () => localStorage.getItem('userToken');\n\n/**\r\n * Fungsi utilitas untuk melakukan permintaan API.\r\n * Menambahkan token otentikasi ke header jika tersedia.\r\n * Menangani respons error dari server.\r\n * @param {string} endpoint - Bagian endpoint URL API (misal: '/auth/login').\r\n * @param {Object} options - Opsi fetch API (method, body, headers, dll.).\r\n * @returns {Promise<Object | null>} Data JSON dari respons atau null jika 204 No Content.\r\n * @throws {Error} Jika respons dari server tidak OK.\r\n */\nconst apiFetch = async (endpoint, options = {}) => {\n  const token = getToken();\n  // Gabungkan header yang ada dengan Content-Type default\n  const headers = {\n    'Content-Type': 'application/json',\n    ...options.headers\n  };\n\n  // Tambahkan header Authorization jika token ada\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n  const response = await fetch(`${API_URL}${endpoint}`, {\n    ...options,\n    headers\n  });\n  if (!response.ok) {\n    // Tangani error dari backend, termasuk pesan error spesifik\n    const errorData = await response.json();\n    throw new Error(errorData.message || 'Terjadi kesalahan pada server');\n  }\n\n  // Jika respons 204 No Content atau tidak ada konten, kembalikan null\n  if (response.status === 204 || response.headers.get('Content-Length') === '0') {\n    return null;\n  }\n\n  // Parse respons sebagai JSON\n  return response.json();\n};\n\n// --- AUTHENTICATION API CALLS ---\n\n/**\r\n * Mengirim permintaan login ke backend.\r\n * @param {string} email - Email pengguna.\r\n * @param {string} password - Sandi pengguna.\r\n * @returns {Promise<Object>} Respons dari backend yang berisi token dan info pengguna.\r\n */\nexport const login = (email, password) => apiFetch('/auth/login', {\n  method: 'POST',\n  body: JSON.stringify({\n    email,\n    password\n  })\n});\n\n/**\r\n * Mengirim permintaan registrasi pengguna baru ke backend.\r\n * @param {string} email - Email pengguna baru.\r\n * @param {string} password - Sandi pengguna baru.\r\n * @returns {Promise<Object>} Respons dari backend.\r\n */\nexport const register = (email, password) => {\n  return apiFetch('/auth/register', {\n    method: 'POST',\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n};\n\n/**\r\n * Mengirim permintaan verifikasi email ke backend.\r\n * @param {string} email - Email yang akan diverifikasi.\r\n * @param {string} code - Kode verifikasi yang diterima pengguna.\r\n * @returns {Promise<Object>} Respons dari backend.\r\n */\nexport const verifyEmail = (email, code) => apiFetch('/auth/verify-email', {\n  method: 'POST',\n  body: JSON.stringify({\n    email,\n    code\n  })\n});\n\n/**\r\n * Mengirim permintaan ke backend untuk memulai proses reset sandi.\r\n * Backend akan mengirim link reset ke email yang diberikan.\r\n * @param {string} email - Email pengguna yang ingin mereset sandi.\r\n * @returns {Promise<Object>} Mengembalikan objek respons dari backend.\r\n */\nexport const forgotPassword = email => apiFetch('/auth/forgot-password', {\n  method: 'POST',\n  body: JSON.stringify({\n    email\n  })\n});\n\n/**\r\n * Mengirim sandi baru dan token reset ke backend untuk mengatur ulang sandi pengguna.\r\n * @param {string} token - Token reset sandi yang diterima dari email.\r\n * @param {string} newPassword - Sandi baru yang ingin diatur oleh pengguna.\r\n * @returns {Promise<Object>} Mengembalikan objek respons dari backend.\r\n */\nexport const resetPassword = (token, newPassword) => apiFetch('/auth/reset-password', {\n  method: 'POST',\n  body: JSON.stringify({\n    token,\n    newPassword\n  })\n});\n\n// --- TRANSACTIONS API CALLS (CRUD) ---\n\n/**\r\n * Mengambil daftar transaksi.\r\n * @returns {Promise<Array<Object>>} Array objek transaksi.\r\n */\nexport const getTransactions = () => apiFetch('/transactions');\n\n/**\r\n * Membuat transaksi baru.\r\n * @param {Object} data - Data transaksi baru.\r\n * @returns {Promise<Object>} Objek transaksi yang baru dibuat.\r\n */\nexport const createTransaction = data => apiFetch('/transactions', {\n  method: 'POST',\n  body: JSON.stringify(data)\n});\n\n/**\r\n * Memperbarui transaksi yang ada.\r\n * @param {number} id - ID transaksi yang akan diperbarui.\r\n * @param {Object} data - Data transaksi yang diperbarui.\r\n * @returns {Promise<Object>} Objek transaksi yang diperbarui.\r\n */\nexport const updateTransaction = (id, data) => apiFetch(`/transactions/${id}`, {\n  method: 'PUT',\n  body: JSON.stringify(data)\n});\n\n/**\r\n * Menghapus transaksi.\r\n * @param {number} id - ID transaksi yang akan dihapus.\r\n * @returns {Promise<null>} Null jika berhasil dihapus.\r\n */\nexport const deleteTransaction = id => apiFetch(`/transactions/${id}`, {\n  method: 'DELETE'\n});\n\n// --- CATEGORIES API CALLS (CRUD) ---\n\n/**\r\n * Mengambil daftar kategori.\r\n * @returns {Promise<Array<Object>>} Array objek kategori.\r\n */\nexport const getCategories = () => apiFetch('/categories');\n\n/**\r\n * Membuat kategori baru.\r\n * @param {Object} data - Data kategori baru.\r\n * @returns {Promise<Object>} Objek kategori yang baru dibuat.\r\n */\nexport const createCategory = data => apiFetch('/categories', {\n  method: 'POST',\n  body: JSON.stringify(data)\n});\n\n/**\r\n * Memperbarui kategori yang ada.\r\n * @param {number} id - ID kategori yang akan diperbarui.\r\n * @param {Object} data - Data kategori yang diperbarui.\r\n * @returns {Promise<Object>} Objek kategori yang diperbarui.\r\n */\nexport const updateCategory = (id, data) => apiFetch(`/categories/${id}`, {\n  method: 'PUT',\n  body: JSON.stringify(data)\n});\n\n/**\r\n * Menghapus kategori.\r\n * @param {number} id - ID kategori yang akan dihapus.\r\n * @returns {Promise<null>} Null jika berhasil dihapus.\r\n */\nexport const deleteCategory = id => apiFetch(`/categories/${id}`, {\n  method: 'DELETE'\n});\n\n// --- BUDGETS API CALLS (Read & Create/Update) ---\n\n/**\r\n * Mengambil daftar anggaran untuk bulan dan tahun tertentu.\r\n * @param {number} year - Tahun anggaran.\r\n * @param {number} month - Bulan anggaran (1-12).\r\n * @returns {Promise<Array<Object>>} Array objek anggaran.\r\n */\nexport const getBudgets = (year, month) => apiFetch(`/budgets?year=${year}&month=${month}`);\n\n/**\r\n * Mengatur atau memperbarui anggaran untuk kategori tertentu.\r\n * @param {Object} data - Data anggaran (misal: { user_id, category_id, month, year, amount }).\r\n * @returns {Promise<Object>} Objek anggaran yang dibuat/diperbarui.\r\n */\nexport const setBudget = data => apiFetch('/budgets', {\n  method: 'POST',\n  // Backend menggunakan POST untuk create/update anggaran\n  body: JSON.stringify(data)\n});\n\n// --- ACCOUNTS API CALLS (CRUD) ---\n\n/**\r\n * Memperbarui akun yang ada.\r\n * @param {number} id - ID akun yang akan diperbarui.\r\n * @param {Object} data - Data akun yang diperbarui.\r\n * @returns {Promise<Object>} Objek akun yang diperbarui.\r\n */\nexport const updateAccount = (id, data) => apiFetch(`/accounts/${id}`, {\n  method: 'PUT',\n  body: JSON.stringify(data)\n});\n\n/**\r\n * Menghapus akun.\r\n * @param {number} id - ID akun yang akan dihapus.\r\n * @returns {Promise<null>} Null jika berhasil dihapus.\r\n */\nexport const deleteAccount = id => apiFetch(`/accounts/${id}`, {\n  method: 'DELETE'\n});\n\n/**\r\n * Mengambil daftar akun.\r\n * @returns {Promise<Array<Object>>} Array objek akun.\r\n */\nexport const getAccounts = () => apiFetch('/accounts');\n\n/**\r\n * Membuat akun baru.\r\n * @param {Object} data - Data akun baru.\r\n * @returns {Promise<Object>} Objek akun yang baru dibuat.\r\n */\nexport const createAccount = data => apiFetch('/accounts', {\n  method: 'POST',\n  body: JSON.stringify(data)\n});\n\n// --- DEBTS API CALLS (CRUD) ---\n\n/**\r\n * Mengambil daftar hutang.\r\n * @returns {Promise<Array<Object>>} Array objek hutang.\r\n */\nexport const getDebts = () => apiFetch('/debts');\n\n/**\r\n * Membuat hutang baru.\r\n * @param {Object} data - Data hutang baru.\r\n * @returns {Promise<Object>} Objek hutang yang baru dibuat.\r\n */\nexport const createDebt = data => apiFetch('/debts', {\n  method: 'POST',\n  body: JSON.stringify(data)\n});\n\n/**\r\n * Menghapus hutang.\r\n * @param {number} id - ID hutang yang akan dihapus.\r\n * @returns {Promise<null>} Null jika berhasil dihapus.\r\n */\nexport const deleteDebt = id => apiFetch(`/debts/${id}`, {\n  method: 'DELETE'\n});\n\n/**\r\n * Menandai hutang sebagai sudah dibayar.\r\n * Menggunakan metode PATCH untuk update status parsial.\r\n * @param {number} id - ID hutang yang akan ditandai sebagai dibayar.\r\n * @returns {Promise<Object>} Objek hutang yang diperbarui.\r\n */\nexport const markDebtAsPaid = id => apiFetch(`/debts/${id}/status`, {\n  method: 'PATCH'\n});","map":{"version":3,"names":["API_URL","getToken","localStorage","getItem","apiFetch","endpoint","options","token","headers","response","fetch","ok","errorData","json","Error","message","status","get","login","email","password","method","body","JSON","stringify","register","verifyEmail","code","forgotPassword","resetPassword","newPassword","getTransactions","createTransaction","data","updateTransaction","id","deleteTransaction","getCategories","createCategory","updateCategory","deleteCategory","getBudgets","year","month","setBudget","updateAccount","deleteAccount","getAccounts","createAccount","getDebts","createDebt","deleteDebt","markDebtAsPaid"],"sources":["E:/testis/frontend/src/apiservice.js"],"sourcesContent":["// apiservice.js\r\nconst API_URL = 'http://localhost:5000/api'; // Pastikan ini mengarah ke backend Anda\r\n\r\n/**\r\n * Mengambil token otentikasi dari localStorage.\r\n * @returns {string | null} Token JWT jika ada, atau null.\r\n */\r\nconst getToken = () => localStorage.getItem('userToken');\r\n\r\n/**\r\n * Fungsi utilitas untuk melakukan permintaan API.\r\n * Menambahkan token otentikasi ke header jika tersedia.\r\n * Menangani respons error dari server.\r\n * @param {string} endpoint - Bagian endpoint URL API (misal: '/auth/login').\r\n * @param {Object} options - Opsi fetch API (method, body, headers, dll.).\r\n * @returns {Promise<Object | null>} Data JSON dari respons atau null jika 204 No Content.\r\n * @throws {Error} Jika respons dari server tidak OK.\r\n */\r\nconst apiFetch = async (endpoint, options = {}) => {\r\n    const token = getToken();\r\n    // Gabungkan header yang ada dengan Content-Type default\r\n    const headers = { 'Content-Type': 'application/json', ...options.headers };\r\n\r\n    // Tambahkan header Authorization jika token ada\r\n    if (token) {\r\n        headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n\r\n    const response = await fetch(`${API_URL}${endpoint}`, { ...options, headers });\r\n\r\n    if (!response.ok) {\r\n        // Tangani error dari backend, termasuk pesan error spesifik\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || 'Terjadi kesalahan pada server');\r\n    }\r\n\r\n    // Jika respons 204 No Content atau tidak ada konten, kembalikan null\r\n    if (response.status === 204 || response.headers.get('Content-Length') === '0') {\r\n        return null;\r\n    }\r\n\r\n    // Parse respons sebagai JSON\r\n    return response.json();\r\n};\r\n\r\n// --- AUTHENTICATION API CALLS ---\r\n\r\n/**\r\n * Mengirim permintaan login ke backend.\r\n * @param {string} email - Email pengguna.\r\n * @param {string} password - Sandi pengguna.\r\n * @returns {Promise<Object>} Respons dari backend yang berisi token dan info pengguna.\r\n */\r\nexport const login = (email, password) => apiFetch('/auth/login', {\r\n    method: 'POST',\r\n    body: JSON.stringify({ email, password }),\r\n});\r\n\r\n/**\r\n * Mengirim permintaan registrasi pengguna baru ke backend.\r\n * @param {string} email - Email pengguna baru.\r\n * @param {string} password - Sandi pengguna baru.\r\n * @returns {Promise<Object>} Respons dari backend.\r\n */\r\nexport const register = (email, password) => {\r\n    return apiFetch('/auth/register', {\r\n        method: 'POST',\r\n        body: JSON.stringify({ email, password }),\r\n    });\r\n};\r\n\r\n/**\r\n * Mengirim permintaan verifikasi email ke backend.\r\n * @param {string} email - Email yang akan diverifikasi.\r\n * @param {string} code - Kode verifikasi yang diterima pengguna.\r\n * @returns {Promise<Object>} Respons dari backend.\r\n */\r\nexport const verifyEmail = (email, code) => apiFetch('/auth/verify-email', {\r\n    method: 'POST',\r\n    body: JSON.stringify({ email, code }),\r\n});\r\n\r\n/**\r\n * Mengirim permintaan ke backend untuk memulai proses reset sandi.\r\n * Backend akan mengirim link reset ke email yang diberikan.\r\n * @param {string} email - Email pengguna yang ingin mereset sandi.\r\n * @returns {Promise<Object>} Mengembalikan objek respons dari backend.\r\n */\r\nexport const forgotPassword = (email) => apiFetch('/auth/forgot-password', {\r\n    method: 'POST',\r\n    body: JSON.stringify({ email }),\r\n});\r\n\r\n/**\r\n * Mengirim sandi baru dan token reset ke backend untuk mengatur ulang sandi pengguna.\r\n * @param {string} token - Token reset sandi yang diterima dari email.\r\n * @param {string} newPassword - Sandi baru yang ingin diatur oleh pengguna.\r\n * @returns {Promise<Object>} Mengembalikan objek respons dari backend.\r\n */\r\nexport const resetPassword = (token, newPassword) => apiFetch('/auth/reset-password', {\r\n    method: 'POST',\r\n    body: JSON.stringify({ token, newPassword }),\r\n});\r\n\r\n// --- TRANSACTIONS API CALLS (CRUD) ---\r\n\r\n/**\r\n * Mengambil daftar transaksi.\r\n * @returns {Promise<Array<Object>>} Array objek transaksi.\r\n */\r\nexport const getTransactions = () => apiFetch('/transactions');\r\n\r\n/**\r\n * Membuat transaksi baru.\r\n * @param {Object} data - Data transaksi baru.\r\n * @returns {Promise<Object>} Objek transaksi yang baru dibuat.\r\n */\r\nexport const createTransaction = (data) => apiFetch('/transactions', {\r\n    method: 'POST',\r\n    body: JSON.stringify(data),\r\n});\r\n\r\n/**\r\n * Memperbarui transaksi yang ada.\r\n * @param {number} id - ID transaksi yang akan diperbarui.\r\n * @param {Object} data - Data transaksi yang diperbarui.\r\n * @returns {Promise<Object>} Objek transaksi yang diperbarui.\r\n */\r\nexport const updateTransaction = (id, data) => apiFetch(`/transactions/${id}`, {\r\n    method: 'PUT',\r\n    body: JSON.stringify(data),\r\n});\r\n\r\n/**\r\n * Menghapus transaksi.\r\n * @param {number} id - ID transaksi yang akan dihapus.\r\n * @returns {Promise<null>} Null jika berhasil dihapus.\r\n */\r\nexport const deleteTransaction = (id) => apiFetch(`/transactions/${id}`, { method: 'DELETE' });\r\n\r\n// --- CATEGORIES API CALLS (CRUD) ---\r\n\r\n/**\r\n * Mengambil daftar kategori.\r\n * @returns {Promise<Array<Object>>} Array objek kategori.\r\n */\r\nexport const getCategories = () => apiFetch('/categories');\r\n\r\n/**\r\n * Membuat kategori baru.\r\n * @param {Object} data - Data kategori baru.\r\n * @returns {Promise<Object>} Objek kategori yang baru dibuat.\r\n */\r\nexport const createCategory = (data) => apiFetch('/categories', {\r\n    method: 'POST',\r\n    body: JSON.stringify(data),\r\n});\r\n\r\n/**\r\n * Memperbarui kategori yang ada.\r\n * @param {number} id - ID kategori yang akan diperbarui.\r\n * @param {Object} data - Data kategori yang diperbarui.\r\n * @returns {Promise<Object>} Objek kategori yang diperbarui.\r\n */\r\nexport const updateCategory = (id, data) => apiFetch(`/categories/${id}`, {\r\n    method: 'PUT',\r\n    body: JSON.stringify(data)\r\n});\r\n\r\n/**\r\n * Menghapus kategori.\r\n * @param {number} id - ID kategori yang akan dihapus.\r\n * @returns {Promise<null>} Null jika berhasil dihapus.\r\n */\r\nexport const deleteCategory = (id) => apiFetch(`/categories/${id}`, { method: 'DELETE' });\r\n\r\n\r\n// --- BUDGETS API CALLS (Read & Create/Update) ---\r\n\r\n/**\r\n * Mengambil daftar anggaran untuk bulan dan tahun tertentu.\r\n * @param {number} year - Tahun anggaran.\r\n * @param {number} month - Bulan anggaran (1-12).\r\n * @returns {Promise<Array<Object>>} Array objek anggaran.\r\n */\r\nexport const getBudgets = (year, month) => apiFetch(`/budgets?year=${year}&month=${month}`);\r\n\r\n/**\r\n * Mengatur atau memperbarui anggaran untuk kategori tertentu.\r\n * @param {Object} data - Data anggaran (misal: { user_id, category_id, month, year, amount }).\r\n * @returns {Promise<Object>} Objek anggaran yang dibuat/diperbarui.\r\n */\r\nexport const setBudget = (data) => apiFetch('/budgets', {\r\n    method: 'POST', // Backend menggunakan POST untuk create/update anggaran\r\n    body: JSON.stringify(data)\r\n});\r\n\r\n\r\n// --- ACCOUNTS API CALLS (CRUD) ---\r\n\r\n/**\r\n * Memperbarui akun yang ada.\r\n * @param {number} id - ID akun yang akan diperbarui.\r\n * @param {Object} data - Data akun yang diperbarui.\r\n * @returns {Promise<Object>} Objek akun yang diperbarui.\r\n */\r\nexport const updateAccount = (id, data) => apiFetch(`/accounts/${id}`, { method: 'PUT', body: JSON.stringify(data) });\r\n\r\n/**\r\n * Menghapus akun.\r\n * @param {number} id - ID akun yang akan dihapus.\r\n * @returns {Promise<null>} Null jika berhasil dihapus.\r\n */\r\nexport const deleteAccount = (id) => apiFetch(`/accounts/${id}`, { method: 'DELETE' });\r\n\r\n/**\r\n * Mengambil daftar akun.\r\n * @returns {Promise<Array<Object>>} Array objek akun.\r\n */\r\nexport const getAccounts = () => apiFetch('/accounts');\r\n\r\n/**\r\n * Membuat akun baru.\r\n * @param {Object} data - Data akun baru.\r\n * @returns {Promise<Object>} Objek akun yang baru dibuat.\r\n */\r\nexport const createAccount = (data) => apiFetch('/accounts', {\r\n    method: 'POST',\r\n    body: JSON.stringify(data),\r\n});\r\n\r\n// --- DEBTS API CALLS (CRUD) ---\r\n\r\n/**\r\n * Mengambil daftar hutang.\r\n * @returns {Promise<Array<Object>>} Array objek hutang.\r\n */\r\nexport const getDebts = () => apiFetch('/debts');\r\n\r\n/**\r\n * Membuat hutang baru.\r\n * @param {Object} data - Data hutang baru.\r\n * @returns {Promise<Object>} Objek hutang yang baru dibuat.\r\n */\r\nexport const createDebt = (data) => apiFetch('/debts', {\r\n    method: 'POST',\r\n    body: JSON.stringify(data),\r\n});\r\n\r\n/**\r\n * Menghapus hutang.\r\n * @param {number} id - ID hutang yang akan dihapus.\r\n * @returns {Promise<null>} Null jika berhasil dihapus.\r\n */\r\nexport const deleteDebt = (id) => apiFetch(`/debts/${id}`, {\r\n    method: 'DELETE',\r\n});\r\n\r\n/**\r\n * Menandai hutang sebagai sudah dibayar.\r\n * Menggunakan metode PATCH untuk update status parsial.\r\n * @param {number} id - ID hutang yang akan ditandai sebagai dibayar.\r\n * @returns {Promise<Object>} Objek hutang yang diperbarui.\r\n */\r\nexport const markDebtAsPaid = (id) => apiFetch(`/debts/${id}/status`, {\r\n    method: 'PATCH',\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}