{"ast":null,"code":"// apiservice.js\n\n// Pastikan API_URL ini sesuai dengan URL backend Anda\nconst API_URL = 'http://localhost:5000/api';\nconst getToken = () => localStorage.getItem('userToken');\nconst apiFetch = async (endpoint, options = {}) => {\n  const token = getToken();\n  const headers = {\n    'Content-Type': 'application/json',\n    ...options.headers\n  };\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n  const response = await fetch(`${API_URL}${endpoint}`, {\n    ...options,\n    headers\n  });\n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({\n      message: 'Something went wrong'\n    })); // Tangani jika response bukan JSON\n    // Jika status 401, mungkin token expired, arahkan ke login\n    if (response.status === 401) {\n      // Anda bisa melempar error khusus di sini atau melakukan navigasi langsung\n      // Untuk kasus ini, kita lempar error agar App.js bisa menanganinya\n      throw new Error('Unauthorized: Please log in again.');\n    }\n    throw new Error(errorData.message || 'Terjadi kesalahan pada server');\n  }\n  // Menangani respons 204 No Content atau respons kosong lainnya\n  if (response.status === 204 || response.headers.get('Content-Length') === '0') {\n    return null;\n  }\n  return response.json();\n};\n\n// --- AUTH ---\nexport const login = (email, password) => apiFetch('/auth/login', {\n  method: 'POST',\n  body: JSON.stringify({\n    email,\n    password\n  })\n});\nexport const register = (email, password) => {\n  return apiFetch('/auth/register', {\n    method: 'POST',\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n};\n// --- TRANSACTIONS (CRUD) ---\nexport const getTransactions = () => apiFetch('/transactions');\nexport const createTransaction = data => apiFetch('/transactions', {\n  method: 'POST',\n  body: JSON.stringify(data)\n});\nexport const updateTransaction = (id, data) => apiFetch(`/transactions/${id}`, {\n  method: 'PUT',\n  body: JSON.stringify(data)\n});\nexport const deleteTransaction = id => apiFetch(`/transactions/${id}`, {\n  method: 'DELETE'\n});\n\n// --- CATEGORIES (CRUD) ---\nexport const getCategories = () => apiFetch('/categories');\nexport const createCategory = data => apiFetch('/categories', {\n  method: 'POST',\n  body: JSON.stringify(data)\n});\nexport const updateCategory = (id, data) => apiFetch(`/categories/${id}`, {\n  method: 'PUT',\n  body: JSON.stringify(data)\n});\nexport const deleteCategory = id => apiFetch(`/categories/${id}`, {\n  method: 'DELETE'\n});\n\n// --- BUDGETS (Read & Update) ---\nexport const getBudgets = (year, month) => apiFetch(`/budgets?year=${year}&month=${month}`);\nexport const setBudget = data => apiFetch('/budgets', {\n  method: 'POST',\n  body: JSON.stringify(data)\n});\n\n// FUNGSI getAvailableBudgetMonths YANG SUDAH DIPERBAIKI\nexport const getAvailableBudgetMonths = async () => {\n  // Cukup panggil apiFetch dengan endpoint yang benar\n  // apiFetch sudah menangani token, header, dan error handling\n  return apiFetch('/budgets/available_months');\n};\n\n// --- ACCOUNTS ---\nexport const updateAccount = (id, data) => apiFetch(`/accounts/${id}`, {\n  method: 'PUT',\n  body: JSON.stringify(data)\n});\nexport const deleteAccount = id => apiFetch(`/accounts/${id}`, {\n  method: 'DELETE'\n});\nexport const getAccounts = () => apiFetch('/accounts');\nexport const createAccount = data => apiFetch('/accounts', {\n  method: 'POST',\n  body: JSON.stringify(data)\n});\n\n// --- DEBTS ---\nexport const getDebts = () => apiFetch('/debts');\nexport const createDebt = data => apiFetch('/debts', {\n  method: 'POST',\n  body: JSON.stringify(data)\n});\nexport const deleteDebt = id => apiFetch(`/debts/${id}`, {\n  method: 'DELETE'\n});\n\n// Menggunakan PATCH untuk update status\nexport const markDebtAsPaid = id => apiFetch(`/debts/${id}/status`, {\n  method: 'PATCH'\n});","map":{"version":3,"names":["API_URL","getToken","localStorage","getItem","apiFetch","endpoint","options","token","headers","response","fetch","ok","errorData","json","catch","message","status","Error","get","login","email","password","method","body","JSON","stringify","register","getTransactions","createTransaction","data","updateTransaction","id","deleteTransaction","getCategories","createCategory","updateCategory","deleteCategory","getBudgets","year","month","setBudget","getAvailableBudgetMonths","updateAccount","deleteAccount","getAccounts","createAccount","getDebts","createDebt","deleteDebt","markDebtAsPaid"],"sources":["E:/testis/frontend/src/apiservice.js"],"sourcesContent":["// apiservice.js\r\n\r\n// Pastikan API_URL ini sesuai dengan URL backend Anda\r\nconst API_URL = 'http://localhost:5000/api'; \r\n\r\nconst getToken = () => localStorage.getItem('userToken');\r\n\r\nconst apiFetch = async (endpoint, options = {}) => {\r\n  const token = getToken();\r\n  const headers = { 'Content-Type': 'application/json', ...options.headers };\r\n  if (token) {\r\n    headers['Authorization'] = `Bearer ${token}`;\r\n  }\r\n\r\n  const response = await fetch(`${API_URL}${endpoint}`, { ...options, headers });\r\n\r\n  if (!response.ok) {\r\n    const errorData = await response.json().catch(() => ({ message: 'Something went wrong' })); // Tangani jika response bukan JSON\r\n    // Jika status 401, mungkin token expired, arahkan ke login\r\n    if (response.status === 401) {\r\n        // Anda bisa melempar error khusus di sini atau melakukan navigasi langsung\r\n        // Untuk kasus ini, kita lempar error agar App.js bisa menanganinya\r\n        throw new Error('Unauthorized: Please log in again.');\r\n    }\r\n    throw new Error(errorData.message || 'Terjadi kesalahan pada server');\r\n  }\r\n  // Menangani respons 204 No Content atau respons kosong lainnya\r\n  if (response.status === 204 || response.headers.get('Content-Length') === '0') {\r\n      return null;\r\n  }\r\n  return response.json();\r\n};\r\n\r\n// --- AUTH ---\r\nexport const login = (email, password) => apiFetch('/auth/login', {\r\n  method: 'POST',\r\n  body: JSON.stringify({ email, password }),\r\n});\r\nexport const register = (email, password) => {\r\n  return apiFetch('/auth/register', { \r\n    method: 'POST',\r\n    body: JSON.stringify({ email, password }),\r\n  });\r\n};\r\n// --- TRANSACTIONS (CRUD) ---\r\nexport const getTransactions = () => apiFetch('/transactions');\r\nexport const createTransaction = (data) => apiFetch('/transactions', {\r\n  method: 'POST',\r\n  body: JSON.stringify(data),\r\n});\r\nexport const updateTransaction = (id, data) => apiFetch(`/transactions/${id}`, {\r\n  method: 'PUT',\r\n  body: JSON.stringify(data),\r\n});\r\nexport const deleteTransaction = (id) => apiFetch(`/transactions/${id}`, { method: 'DELETE' });\r\n\r\n// --- CATEGORIES (CRUD) ---\r\nexport const getCategories = () => apiFetch('/categories');\r\nexport const createCategory = (data) => apiFetch('/categories', {\r\n  method: 'POST',\r\n  body: JSON.stringify(data),\r\n});\r\nexport const updateCategory = (id, data) => apiFetch(`/categories/${id}`, {\r\n    method: 'PUT',\r\n    body: JSON.stringify(data)\r\n});\r\nexport const deleteCategory = (id) => apiFetch(`/categories/${id}`, { method: 'DELETE' });\r\n\r\n\r\n// --- BUDGETS (Read & Update) ---\r\nexport const getBudgets = (year, month) => apiFetch(`/budgets?year=${year}&month=${month}`);\r\nexport const setBudget = (data) => apiFetch('/budgets', {\r\n    method: 'POST', \r\n    body: JSON.stringify(data)\r\n});\r\n\r\n// FUNGSI getAvailableBudgetMonths YANG SUDAH DIPERBAIKI\r\nexport const getAvailableBudgetMonths = async () => {\r\n    // Cukup panggil apiFetch dengan endpoint yang benar\r\n    // apiFetch sudah menangani token, header, dan error handling\r\n    return apiFetch('/budgets/available_months'); \r\n};\r\n\r\n// --- ACCOUNTS ---\r\nexport const updateAccount = (id, data) => apiFetch(`/accounts/${id}`, { method: 'PUT', body: JSON.stringify(data) });\r\nexport const deleteAccount = (id) => apiFetch(`/accounts/${id}`, { method: 'DELETE' });\r\nexport const getAccounts = () => apiFetch('/accounts');\r\nexport const createAccount = (data) => apiFetch('/accounts', {\r\n  method: 'POST',\r\n  body: JSON.stringify(data),\r\n});\r\n\r\n// --- DEBTS ---\r\nexport const getDebts = () => apiFetch('/debts');\r\n\r\nexport const createDebt = (data) => apiFetch('/debts', {\r\n  method: 'POST',\r\n  body: JSON.stringify(data),\r\n});\r\n\r\nexport const deleteDebt = (id) => apiFetch(`/debts/${id}`, {\r\n  method: 'DELETE',\r\n});\r\n\r\n// Menggunakan PATCH untuk update status\r\nexport const markDebtAsPaid = (id) => apiFetch(`/debts/${id}/status`, {\r\n  method: 'PATCH',\r\n});"],"mappings":"AAAA;;AAEA;AACA,MAAMA,OAAO,GAAG,2BAA2B;AAE3C,MAAMC,QAAQ,GAAGA,CAAA,KAAMC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;AAExD,MAAMC,QAAQ,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EACjD,MAAMC,KAAK,GAAGN,QAAQ,CAAC,CAAC;EACxB,MAAMO,OAAO,GAAG;IAAE,cAAc,EAAE,kBAAkB;IAAE,GAAGF,OAAO,CAACE;EAAQ,CAAC;EAC1E,IAAID,KAAK,EAAE;IACTC,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUD,KAAK,EAAE;EAC9C;EAEA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGV,OAAO,GAAGK,QAAQ,EAAE,EAAE;IAAE,GAAGC,OAAO;IAAEE;EAAQ,CAAC,CAAC;EAE9E,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMC,SAAS,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO;MAAEC,OAAO,EAAE;IAAuB,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5F;IACA,IAAIN,QAAQ,CAACO,MAAM,KAAK,GAAG,EAAE;MACzB;MACA;MACA,MAAM,IAAIC,KAAK,CAAC,oCAAoC,CAAC;IACzD;IACA,MAAM,IAAIA,KAAK,CAACL,SAAS,CAACG,OAAO,IAAI,+BAA+B,CAAC;EACvE;EACA;EACA,IAAIN,QAAQ,CAACO,MAAM,KAAK,GAAG,IAAIP,QAAQ,CAACD,OAAO,CAACU,GAAG,CAAC,gBAAgB,CAAC,KAAK,GAAG,EAAE;IAC3E,OAAO,IAAI;EACf;EACA,OAAOT,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA,OAAO,MAAMM,KAAK,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAKjB,QAAQ,CAAC,aAAa,EAAE;EAChEkB,MAAM,EAAE,MAAM;EACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;IAAEL,KAAK;IAAEC;EAAS,CAAC;AAC1C,CAAC,CAAC;AACF,OAAO,MAAMK,QAAQ,GAAGA,CAACN,KAAK,EAAEC,QAAQ,KAAK;EAC3C,OAAOjB,QAAQ,CAAC,gBAAgB,EAAE;IAChCkB,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEL,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC;AACJ,CAAC;AACD;AACA,OAAO,MAAMM,eAAe,GAAGA,CAAA,KAAMvB,QAAQ,CAAC,eAAe,CAAC;AAC9D,OAAO,MAAMwB,iBAAiB,GAAIC,IAAI,IAAKzB,QAAQ,CAAC,eAAe,EAAE;EACnEkB,MAAM,EAAE,MAAM;EACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACI,IAAI;AAC3B,CAAC,CAAC;AACF,OAAO,MAAMC,iBAAiB,GAAGA,CAACC,EAAE,EAAEF,IAAI,KAAKzB,QAAQ,CAAC,iBAAiB2B,EAAE,EAAE,EAAE;EAC7ET,MAAM,EAAE,KAAK;EACbC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACI,IAAI;AAC3B,CAAC,CAAC;AACF,OAAO,MAAMG,iBAAiB,GAAID,EAAE,IAAK3B,QAAQ,CAAC,iBAAiB2B,EAAE,EAAE,EAAE;EAAET,MAAM,EAAE;AAAS,CAAC,CAAC;;AAE9F;AACA,OAAO,MAAMW,aAAa,GAAGA,CAAA,KAAM7B,QAAQ,CAAC,aAAa,CAAC;AAC1D,OAAO,MAAM8B,cAAc,GAAIL,IAAI,IAAKzB,QAAQ,CAAC,aAAa,EAAE;EAC9DkB,MAAM,EAAE,MAAM;EACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACI,IAAI;AAC3B,CAAC,CAAC;AACF,OAAO,MAAMM,cAAc,GAAGA,CAACJ,EAAE,EAAEF,IAAI,KAAKzB,QAAQ,CAAC,eAAe2B,EAAE,EAAE,EAAE;EACtET,MAAM,EAAE,KAAK;EACbC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACI,IAAI;AAC7B,CAAC,CAAC;AACF,OAAO,MAAMO,cAAc,GAAIL,EAAE,IAAK3B,QAAQ,CAAC,eAAe2B,EAAE,EAAE,EAAE;EAAET,MAAM,EAAE;AAAS,CAAC,CAAC;;AAGzF;AACA,OAAO,MAAMe,UAAU,GAAGA,CAACC,IAAI,EAAEC,KAAK,KAAKnC,QAAQ,CAAC,iBAAiBkC,IAAI,UAAUC,KAAK,EAAE,CAAC;AAC3F,OAAO,MAAMC,SAAS,GAAIX,IAAI,IAAKzB,QAAQ,CAAC,UAAU,EAAE;EACpDkB,MAAM,EAAE,MAAM;EACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACI,IAAI;AAC7B,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMY,wBAAwB,GAAG,MAAAA,CAAA,KAAY;EAChD;EACA;EACA,OAAOrC,QAAQ,CAAC,2BAA2B,CAAC;AAChD,CAAC;;AAED;AACA,OAAO,MAAMsC,aAAa,GAAGA,CAACX,EAAE,EAAEF,IAAI,KAAKzB,QAAQ,CAAC,aAAa2B,EAAE,EAAE,EAAE;EAAET,MAAM,EAAE,KAAK;EAAEC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACI,IAAI;AAAE,CAAC,CAAC;AACrH,OAAO,MAAMc,aAAa,GAAIZ,EAAE,IAAK3B,QAAQ,CAAC,aAAa2B,EAAE,EAAE,EAAE;EAAET,MAAM,EAAE;AAAS,CAAC,CAAC;AACtF,OAAO,MAAMsB,WAAW,GAAGA,CAAA,KAAMxC,QAAQ,CAAC,WAAW,CAAC;AACtD,OAAO,MAAMyC,aAAa,GAAIhB,IAAI,IAAKzB,QAAQ,CAAC,WAAW,EAAE;EAC3DkB,MAAM,EAAE,MAAM;EACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACI,IAAI;AAC3B,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMiB,QAAQ,GAAGA,CAAA,KAAM1C,QAAQ,CAAC,QAAQ,CAAC;AAEhD,OAAO,MAAM2C,UAAU,GAAIlB,IAAI,IAAKzB,QAAQ,CAAC,QAAQ,EAAE;EACrDkB,MAAM,EAAE,MAAM;EACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACI,IAAI;AAC3B,CAAC,CAAC;AAEF,OAAO,MAAMmB,UAAU,GAAIjB,EAAE,IAAK3B,QAAQ,CAAC,UAAU2B,EAAE,EAAE,EAAE;EACzDT,MAAM,EAAE;AACV,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM2B,cAAc,GAAIlB,EAAE,IAAK3B,QAAQ,CAAC,UAAU2B,EAAE,SAAS,EAAE;EACpET,MAAM,EAAE;AACV,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}